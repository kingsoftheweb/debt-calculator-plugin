.bnews-admin-screen{display:flex;box-sizing:border-box;flex-direction:column;width:100%;padding:2rem}.bnews-admin-screen h1.plugin-title,.bnews-admin-screen h3.plugin-sub-title{text-align:center}.bnews-admin-screen .bnews-admin-section{background:#fff;box-shadow:1px 2px 3px rgba(0,0,0,.5);margin:1rem 0}.bnews-admin-screen .bnews-admin-section .section-header{background:#eee;padding:2rem}.bnews-admin-screen .bnews-admin-section .section-header h2,.bnews-admin-screen .bnews-admin-section .section-header h3{margin:0;padding:0}.bnews-admin-screen .bnews-admin-section .section-content{padding:2rem;display:flex;flex-wrap:wrap}.bnews-admin-screen .bnews-admin-section .section-content .single-page{display:flex;max-width:25%;padding:.5rem;box-sizing:border-box;border:1px solid #eee;height:10rem;overflow:scroll}.bnews-meta-box{display:flex;flex-direction:column;width:100%;justify-content:center;align-items:center;align-content:center;align-self:center;text-align:center}.bnews-meta-box p.options-row{width:100%}.bnews-meta-box p.options-row,.bnews-meta-box p.options-row label{display:flex;justify-content:flex-start;align-items:center;text-align:left}.bnews-meta-box p.options-row label{flex:1;font-weight:500}.bnews-meta-box p.options-row label span{width:100%}.bnews-meta-box p.options-row label span.description{font-size:12px;font-weight:400;font-style:italic}.bnews-meta-box p.options-row input{display:flex;justify-content:center;align-items:center;align-content:center;align-self:center;text-align:center}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkbWluL3Nhc3MvZGFzaGJvYXJkLnNjc3MiLCJhZG1pbi9zYXNzL21ldGEtYm94ZXMuc2NzcyIsImFkbWluL3Nhc3MvdmFyaWFibGVzLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsb0JBQ0ksWUFBYSxDQUNiLHFCQUFzQixDQUN0QixxQkFBc0IsQ0FDdEIsVUFBVyxDQUNYLFlBQVksQ0FMaEIsNEVBV1EsaUJBQWtCLENBWDFCLHlDQWVRLGVBQW1CLENBQ25CLHFDQUEwQyxDQUMxQyxhQUFjLENBakJ0Qix5REFvQlksZUFBbUIsQ0FDbkIsWUFBYSxDQXJCekIsd0hBdUJnQixRQUFTLENBQ1QsU0FBVSxDQXhCMUIsMERBNEJZLFlBQWEsQ0FDYixZQUFhLENBQ2IsY0FBZSxDQTlCM0IsdUVBaUNnQixZQUFhLENBQ2IsYUFBYyxDQUNkLGFBQWUsQ0FDZixxQkFBc0IsQ0FDdEIscUJBQXNCLENBQ3RCLFlBQWEsQ0FDYixlQUFnQixDQ3hDaEMsZ0JBQ0ksWUFBYSxDQUNiLHFCQUFzQixDQUN0QixVQUFXLENDSFgsc0JBQXVCLENBQ3ZCLGtCQUFtQixDQUNuQixvQkFBcUIsQ0FDckIsaUJBQWtCLENBQ2xCLGlCQUFrQixDREp0Qiw4QkFPWSxVQ0VRLENEVHBCLGtFQVFZLFlBQWEsQ0NEckIsMEJBQTJCLENBQzNCLGtCQUFtQixDQUNuQixlRE00QixDQWZoQyxvQ0FjZ0IsTUFBTSxDQUNOLGVBQWdCLENBZmhDLHlDQWlCb0IsVUFBVyxDQWpCL0IscURBc0J3QixjQUFlLENBQ2YsZUFBZ0IsQ0FDaEIsaUJBQWtCLENBeEIxQyxvQ0ErQmdCLFlBQWEsQ0MvQnpCLHNCQUF1QixDQUN2QixrQkFBbUIsQ0FDbkIsb0JBQXFCLENBQ3JCLGlCQUFrQixDQUNsQixpQkFBa0IiLCJmaWxlIjoiYWRtaW4vc2Fzcy9hZG1pbi5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJAaW1wb3J0IFwidmFyaWFibGVzLnNjc3NcIjtcblxuLmJuZXdzLWFkbWluLXNjcmVlbiB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZzoycmVtO1xuXG4gICAgaDEucGx1Z2luLXRpdGxlIHtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIH1cbiAgICBoMy5wbHVnaW4tc3ViLXRpdGxlIHtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIH1cblxuICAgIC5ibmV3cy1hZG1pbi1zZWN0aW9uIHtcbiAgICAgICAgYmFja2dyb3VuZDogI2ZmZmZmZjtcbiAgICAgICAgYm94LXNoYWRvdzogMXB4IDJweCAzcHggcmdiYSgwLCAwLCAwLCAwLjUpO1xuICAgICAgICBtYXJnaW46IDFyZW0gMDtcblxuICAgICAgICAuc2VjdGlvbi1oZWFkZXIge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogI2VlZWVlZTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDJyZW07XG4gICAgICAgICAgICBoMiwgaDMge1xuICAgICAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC5zZWN0aW9uLWNvbnRlbnQge1xuICAgICAgICAgICAgcGFkZGluZzogMnJlbTtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XG5cbiAgICAgICAgICAgIC5zaW5nbGUtcGFnZSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDI1JTtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLjVyZW07XG4gICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZWVlO1xuICAgICAgICAgICAgICAgIGhlaWdodDogMTByZW07XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IHNjcm9sbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxufSIsIkBpbXBvcnQgXCJ2YXJpYWJsZXMuc2Nzc1wiO1xuLmJuZXdzLW1ldGEtYm94IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgQGluY2x1ZGUgYWxpZ24tY2VudGVyO1xuICAgIHAge1xuICAgICAgICAmLm9wdGlvbnMtcm93IHtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIEBpbmNsdWRlIGFsaWduLXN0YXJ0O1xuXG4gICAgICAgICAgICBsYWJlbCB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBAaW5jbHVkZSBhbGlnbi1zdGFydDtcbiAgICAgICAgICAgICAgICBmbGV4OjE7XG4gICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICAgICAgICAgICAgICBzcGFuIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgICAgICYubGFiZWwge1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJi5kZXNjcmlwdGlvbiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zdHlsZTogaXRhbGljO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlucHV0IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIEBpbmNsdWRlIGFsaWduLWNlbnRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0iLCJAbWl4aW4gYWxpZ24tY2VudGVyIHtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuQG1peGluIGFsaWduLXN0YXJ0IHtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xufVxuIl19 */
